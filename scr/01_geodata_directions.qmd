---
title: "01 geodata exploration"
format: md
editor: visual
---

## Explore directions of from_to formula

```{r, warning=F, include=F}
library(tidyverse)

library(MetBrewer)
library(cowplot)
library(kableExtra)
theme_set(theme_minimal())

library(geosphere) # distHavestine()
```

Read data as a table (flatted & merged json-s)

```{r}
formulas <- read.csv("../data/formulas_table.csv")
glimpse(formulas)
```

N formulas per language

```{r, include=F, echo=T}
formulas %>% 
  count(lang, sort = T)
```

### MF loc vs from_to loc

Look if most most freq locations also appear in from_to formula

```{r, include=T, echo=F}
# load loc freq data
loc_freq <- read.csv("../data/locations.csv")

glimpse(loc_freq)

loc_freq <- loc_freq %>% 
  # add ranks within groups
  group_by(corpus) %>% 
  mutate(rank = row_number()) %>% 
  ungroup() %>% 
  rename(lang = corpus)

f_long_from <- formulas %>% 
  select(lang, from_id) %>% 
  rename(qid = from_id)

f_long <- f_long_from %>% 
  rbind(formulas %>% select(lang, to_id) %>% rename(qid = to_id))

f_long %>% 
  group_by(lang) %>% 
  count(qid, sort = T) %>% 
  mutate(rank_ft = row_number()) %>% 
  ungroup() %>% 
  mutate(id = paste0(lang, "_", qid)) %>% 
  select(-lang, -qid) %>% 
  left_join(loc_freq %>% mutate(id = paste0(lang, "_", qid)), by = "id") %>% 
  filter(rank_ft < 21) %>% 
  arrange(lang) %>% 
  select(-lat, -lon) %>% 
  rename(from_to_count = n, 
         total_count = count, 
         rank_total = rank) %>% 
  select(id, qid, lang, label, rank_ft, rank_total, from_to_count, total_count)

rm(f_long, f_long_from, loc_freq)
```

It's a long table, just some observations:

-   Czech:

    -   top in both lists (top-20): Bohemian Forest, Prague, Tatra mountains, Danube, Moravia, Vltava, ROME (!) , Czechia, Elbe, Vienna;

    -   many mountains which is not the case for other corpora

-   DE:

    -   top-20 loc in both: Vienna, Rhine, Paris, Berlin

    -   all other locs are quite rare if not in from_to; top from_to ranks are weird?? (Gotha, Eisenach, ALtona.. mb they come from some refrains, need to check that)

-   EN:

    -   England, France, Egypt (!), Spain, Rome

    -   top-1 is Maine (?)

    -   many frequent distant locations (china, nile); also not all top from_to locs are frequent

-   FR:

    -   Paris, Rome, France, Kythira (wtf), Rhine;

    -   top-3 locs are very highly cor within lists, overall cor is also not that bad; meaning from-to locs are important locs in general (eg Bordeau, Nice, Louvre Palace); some long-distance things in from-to also – Volga, Tiber

-   IT:

    -   Alps, Apennninne Mountaints, Tiber (?)

    -   the rest from-to are strange places, mb Rhine & Seine are obvious but the rest are strange

-   RU:

    -   Neva, Moscow, Rome (!), SPb, Crimea, Msc Kremlin, Siberia (21 total rank), Caucasus, Kyiv, Nile (lol), Volga

    -   very obvious places mostly within Russia, China is an exception, not than much west expansion visible in from-to from here

-   SL:

    -   Triglav, Soča, Ardiatic sea, Ljubljana, Trieste, Sava

    -   most locs are some within Sl I guess + mostly single counts in from_to

## distances

I calculated Haversine (bird/plane flight) distance between the from-\>to coordinates, the distance is in km.

### calculation

```{r, eval=F, include=F}
# test on smaller sample
t <- formulas[1:2,]
t

# geosphare library

lat_london <- 51.5074
lon_london <- -0.1278
lat_paris <- 48.8566
lon_paris <- 2.3522

distHaversine(c(lon_london, lat_london), c(lon_paris, lat_paris)) / 1000 # div1000 gives km

# same for two first row from formulas
distHaversine(c(t$from_longitude[1], t$from_latitude[1]), 
              c(t$to_longitude[1], t$to_latitude[1])) / 1000

# check application to the table:
t %>% 
  rowwise() %>% 
  mutate(dist_haversine = distHaversine(c(from_longitude, from_latitude),
                                        c(to_longitude, to_latitude)) / 1000) %>% 
  ungroup()
```

```{r, include=T, echo=T}
# calculate haversine distances between from_to points in current table

formulas_d <- formulas %>% 
  rowwise() %>% 
  mutate(dist_haversine = distHaversine(
    c(from_longitude, from_latitude),
    c(to_longitude, to_latitude)) 
      / 1000) %>% 
  ungroup() %>% 
  # make numbers human-readable
  mutate(dist_haversine = round(dist_haversine, digits = 3)) 

head(formulas_d %>% select(lang, text, from_placename, to_placename, dist_haversine))
```

### analysis

#### overall

Poet's mind is often flying not that far away?

```{r, include=T, echo=F}
formulas_d %>% 
  #filter(lang == "sl") %>% 
  ggplot(aes(x = lang, y = dist_haversine)) + 
  geom_violin(fill = "lightseagreen") + 
  labs(title = "Distribution of all distances",
       y = "Dist Haversine (km)")
```

```{r, include=T, echo=F}
formulas_d %>% 
  #filter(lang == "sl") %>% 
  ggplot(aes(x = lang, y = dist_haversine, group = lang)) + 
  geom_jitter(alpha = 0.2, width = 0.2) #+
  labs(title = "Distribution of all distances",
       y = "Dist Haversine (km)")
```

What I see here: most of the distances are actually very small; but for some traditions there are quite a portion of longer ones.

The problem is the threshold here: would we want to divide into short/long groups based on any corpus-related number (mean/med dist? country size? which country then), or to set an arbitrary baseline like everything less then 1000km is a small distance, and anything longer – is long?

### Figure 1: dist distribution

```{r}
dist_raw <- formulas_d %>% 
  filter(lang != "it") %>% 
  filter(dist_haversine > 0) %>% 
  ggplot(aes(x = lang, y = dist_haversine, group = lang)) + 
  geom_jitter(alpha = 0.2, width = 0.2, colour = met.brewer("Cassatt2")[10]) + 
  geom_violin(fill = met.brewer("Cassatt2")[4], alpha = 0.7) + 
  labs(y = "Distance (km)",
       x = "Corpus") + 
  theme(axis.text = element_text(size = 12),
        axis.title = element_text(size = 14))

dist_raw
```

```{r}
dist_log <- formulas_d %>% 
  filter(lang != "it") %>% 
  filter(dist_haversine > 0) %>% 
  ggplot(aes(y = factor(lang, levels = c("sl", "ru", "fr", "en", "de", "cs")), 
             x = dist_haversine, group = lang)) + 
  geom_jitter(alpha = 0.2, width = 0.2, colour = met.brewer("Cassatt2")[10]) + 
  geom_violin(fill = met.brewer("Cassatt2")[4], alpha = 0.7) + 
  labs(x = "Distance (log scale)",
       y = "Corpus") + 
  theme(axis.text = element_text(size = 12),
        axis.title = element_text(size = 14)) + 
  scale_x_log10()

dist_log
```

```{r, eval=F, include=F, echo=F}
plot_grid(dist_raw, NULL, dist_log,
          rel_widths = c(1, 0.03, 1), nrow = 1,
          labels = c("A", "B"), label_size = 18)


ggsave("../plots/Fig_1.png", plot = last_plot(),
       bg = "white", dpi = 300, width = 12, height = 6)
```

```{r, eval=F, include=F, echo=F}

# rivers formulas

formulas_d %>% 
  filter(lang %in% c("en", "ru", "fr")) %>% 
  filter(from_type == "river" & to_type == "river") %>% 
  group_by(lang) %>% 
  slice_max(order_by = dist_haversine, n = 10) %>% 
  select(text, from_placename, to_placename, dist_haversine)
```

### dist summary stats

Calculate mean & median dist for each corpus + 3rd quantile

```{r, include=T, echo=F}
dist_summary <- formulas_d %>% 
  group_by(lang) %>% 
  summarise(dist_mean = mean(dist_haversine),
            dist_median = median(dist_haversine),
            third_quant = quantile(dist_haversine, 0.75)) %>% 
  ungroup()

dist_summary
```

Plot based on the groups long / short distances:

I just wanted to see how these values are distributed, should we divide them in two groups

```{r, include=T, echo=F}
formulas_d %>% 
  left_join(dist_summary, by = "lang") %>% 
  mutate(dist_longer_median = ifelse(dist_haversine > dist_median, "yes", "no")
         #dist_longer_3qu = ifelse(dist_haversine > third_quant, 1, 0)
         ) %>% 
  select(lang, dist_haversine, dist_longer_median) %>% 
  ungroup() %>% 
  ggplot(aes(x = lang, y = dist_haversine, fill = dist_longer_median)) + 
  geom_boxplot() + 
  labs(title = "Grouping based on: distances longer than median")
```

```{r, include=T, echo=F}
formulas_d %>% 
  left_join(dist_summary, by = "lang") %>% 
  mutate(dist_longer_3qu = ifelse(dist_haversine > third_quant, "yes", "no")
         ) %>% 
  select(lang, dist_haversine, dist_longer_3qu) %>% 
  ungroup() %>% 
  ggplot(aes(x = lang, y = dist_haversine, fill = dist_longer_3qu)) + 
  geom_boxplot() + 
  labs(title = "Grouping based on: distances longer than 3rd quant limit")
```

Same grouping method for all: dist is short is \< 1000km, long if \>1000km

```{r, include=T, echo=F}
formulas_d %>% 
  left_join(dist_summary, by = "lang") %>% 
  mutate(dist_longer_1000 = ifelse(dist_haversine > 1000, "yes", "no")
         ) %>% 
  select(lang, dist_haversine, dist_longer_1000) %>% 
  ungroup() %>% 
  ggplot(aes(x = lang, y = dist_haversine, fill = dist_longer_1000)) + 
  geom_boxplot() + 
  labs(title = "Grouped dist distribution: distances longer than 1000km")
```

#### Time: distances based on author birth year

```{r, include = F, echo=F}

# check birth year missing data

totals <- formulas %>% 
  count(lang) %>% 
  rename(total_n = n)

formulas_d %>% 
  select(lang, year_birth, dist_haversine) %>% 
  filter(!is.na(year_birth)) %>% 
  count(lang) %>% 
  left_join(totals, by = "lang")
```

This is how author's birth years are distributed, if we're only looking in our formulas subset

```{r, include=T, echo=F, warning=FALSE}
formulas %>% 
  select(lang, year_birth) %>% 
  ggplot(aes(x = year_birth)) + 
  geom_density(fill = "lightseagreen") + 
  facet_wrap(~lang) + 
  geom_vline(xintercept = seq(1600, 1900, 50), 
             lty = 2, colour = "darkblue") + 
  labs(title = "Formulas found per 50 years period",
       subtitle = "Year of author birth is used")
```

Add time period column & recalculate summary dist metrics: I aggregated based on the half-century periods the author was born. The question here was: do authors born in quite distant times uses different distances when from_to formula appears?

```{r, include=T, echo=F}
dist_t_summary <- formulas_d %>% 
  filter(!is.na(year_birth)) %>% 
  mutate(period_birth = floor(year_birth/50)*50,
         period_end = period_birth + 49,
         period = paste0(period_birth, "—", period_end),
         lang_t = paste0(lang, " ", period)) %>% 
  group_by(lang_t) %>% 
  summarise(dist_mean = mean(dist_haversine),
            dist_median = median(dist_haversine),
            third_quant = quantile(dist_haversine, 0.75),
            number_formulas = n()) %>% 
  ungroup() 

dist_t_summary
```

```{r, include=T, echo=F, warning=F}
dist_t_summary %>% 
  select(-number_formulas) %>% 
  pivot_longer(!lang_t) %>% 
  left_join(dist_t_summary %>% select(lang_t, number_formulas)) %>% 
  filter(number_formulas > 4) %>% # filter out period if less than [5 formulas found 
  mutate(lang = str_extract(lang_t, "^.."), 
         lang_t = str_remove(lang_t, "^..."),
         lang_t = str_remove(lang_t, "—....$")) %>% 
  
  #filter(lang == "cs") %>% 
  ggplot(aes(x = lang_t, y = value, group = name, colour = name)) +
  geom_line(aes(linewidth = number_formulas)) + 
  geom_hline(yintercept = 2000, lty = 2, colour = "darkblue") + 
  facet_wrap(~lang, scales = "free_x") + 
  labs(y = "dist in km",
       title = "Temporal distribution of distances in from_to formulas",
       subtitle = "x axis: 50-years chunks based on the author's birth year\n(i.e., 1750: aggregated value for authors born between 1750 and 1799") + 
  theme(legend.position = "bottom")
```

-   overall: we can see than Czech, German, & Slovenian from_to aggregated(!) distances are usually below 2k km; longest from-to are en, fr, and somewhat ru;

-   NB: my 2000 km threshold is absolutely arbitrary; also, I removed periods with less than 5 formulas;

-   Peaks details:

    -   DE: peak period 1700-1749 is only 9 formulas, may be a random result

    -   EN: authors born in 1750-1799: 40 formulas found; for 1800-1849 & 1850-1899 even more data (104 & 158 resp.) –\> these dist are really long on average;

    -   FR: low number of formulas for any period before 1750-1799; 1800-1849 has 200+ though, so also long;

    -   RU: most formulas come from authors born in 18500-1899; but for 18c-authors there are 18 (1700-1749) and 24 (1750-1799) formulas respectively, so it actually can tell us something – like that these from-to mean/median distances are stable high

### short vs long dist

Previous plot was just aggregating all distances based on 50-year period and calculated means etc. Here I did not do any aggregation, but divided the observations in two groups (\> or \<1000km distance). Then I put everything on roughly the same timeline (no aggregation, just formulas + author's year birth)

```{r, include=T, echo=F, warning=F}
formulas_d %>% 
  mutate(dist_longer_1k = ifelse(dist_haversine > 1000, "yes", "no")) %>% 
  #filter(dist_longer_1k == "no") %>% 
  ggplot(aes(x = year_birth, y = dist_haversine, group = dist_longer_1k)) + 
  geom_point(aes(colour = dist_longer_1k), alpha = 0.5) + 
  facet_wrap(~lang) + 
  geom_smooth(aes(colour = dist_longer_1k, fill = dist_longer_1k)) + 
  geom_hline(yintercept = 5000, lty = 2, colour = "darkblue") + 
  
  theme(legend.position = "bottom") + 
  scale_y_continuous(limits = c(-1, 20000)) + 
  labs(y = "Dist Haversine, km", 
       x = "Author birth year")
```

For longer distances: everyone except EN and FR are usually below the 5k distances even for longer ones? ru is somewhere inbetween.

So I guess what are the takeouts here:

-   the distribution of from-to distances is very unequal: we actually have more closer distances, when something like "from portugal to china" situations;

-   however the latter is characteristic at least for Eng, Fr, and mb Ru (not surprising but still); for Italy we have too little observations; German corpus look to me closer to Czech, than to the 'expansion' ones;

-   I think we should consider dividing the distances in groups for sure, otherwise short distances are practically invisible;

-   Question what I'm not sure about is the threshold between short/long distance though, should it be calculated for each country separately, or not, etc. FOR NOW I just used 1000km for all corpora.

### Types: river –\> mountain

How distances are related to the types of locations in from-to formula?

#### Overview

total

```{r, include=T, echo=F}
formulas_d %>% 
  mutate(type_pair = paste0(from_type, " --> ", to_type)) %>% 
  count(type_pair, sort = T)
```

Add groups of shorter / longer distances (simple 1000 km threshold)

```{r, include=T, echo=F}
total_sl <- formulas_d %>% 
  mutate(dist_type = ifelse(dist_haversine > 1000, "long", "short")) %>% 
  count(dist_type, sort = T)

total_sl_lang <- formulas_d %>% 
  mutate(dist_type = ifelse(dist_haversine > 1000, "long", "short")) %>% 
  count(dist_type, lang, sort = T)

total_sl

total_sl_lang %>% 
  pivot_wider(names_from = dist_type, values_from = n) %>% 
  left_join(totals, by = "lang") %>% 
  mutate(perc_short = round((short/total_n)*100, 1),
         perc_long = round((long/total_n)*100, 1)) %>% 
  select(-total_n)
```

Similar picture to the above: younger literatures are more about closer distances (cs % short – 72%? sl — 87%), while others are more equal to 50/50

```{r, include=T, echo=F}
formulas_d %>% 
  mutate(type_pair = paste0(from_type, " --> ", to_type), 
         dist_type = ifelse(dist_haversine > 1000, "long", "short")) %>% 
  count(type_pair, dist_type, sort = T) %>% 
  group_by(dist_type) %>% 
  #slice_max(order_by = n, n = 10) %>% 
  mutate(rank = row_number()) %>% select(-n) %>% 
  pivot_wider(names_from = dist_type, values_from = rank) %>% 
  arrange(-desc(short))
```

What I see here: ok basically city-city is a universal thing; mountain to mountain is probably strictly a Czech thing (see below); river-river is interestingly more like a long-distance thing, than sth else.

Overall rank cor is not very bad, but ofc some things are really only about long distances (everything with continents) and some are only about shorter distances (mountain to sea and other way round (probably also czech feature)).

#### By language

```{r, include=T, echo=F}
formulas %>% 
  mutate(type_pair = paste0(from_type, " --> ", to_type)) %>% 
  group_by(lang) %>% 
  count(type_pair, sort = T) %>% 
  slice_max(order_by = n, n = 5) %>% 
  ungroup() %>% 
  mutate(type_pair = paste0(type_pair, " (", n, ")")) %>% 
  group_by(lang) %>% 
  mutate(top_list = paste0(type_pair, collapse = " <br> ")) %>% 
  select(-n, -type_pair) %>% 
  ungroup() %>% 
  distinct() %>% 
  #pivot_wider(names_from = lang, values_from = top_list) %>% 
  knitr::kable(escape = F)
```

#### longer vs shorter distances

```{r, include=T, echo=F}
formulas_d %>% 
  mutate(type_pair = paste0(from_type, " --> ", to_type), 
         dist_type = ifelse(dist_haversine > 1000, "long", "short")) %>% 
  group_by(lang, dist_type) %>% 
  count(type_pair, sort = T) %>% 
  slice_max(order_by = n, n = 5) %>% 
  ungroup() 
```

Also a long table, some summary from me:

-   I don't take 'deafult' into account here: we should tag it manually to understand what it is;

<!-- -->

-   cs: some distinction that long distances are rather river-to-river, while short are mountain-to-mountain;

-   en: long dist are about sth\<-\>country; short include many rivers sometimes;

-   fr: also a portion of long river-river distances;

-   ru: same as above;

### from-to places

Just lists of real places, I'm not sure we need to think about this now (not too many observations also)

```{r, include=T, echo=F}
formulas %>% 
  mutate(from_to_pair = paste0(from_placename, " --> ", to_placename)) %>% 
  count(from_to_pair, sort = T) %>% 
  head(20)
```

By language

```{r, include=T, echo=F}
formulas %>% 
  mutate(from_to_pair = paste0(from_placename, " --> ", to_placename)) %>% 
  group_by(lang) %>% 
  count(from_to_pair, sort = T) %>% 
  slice_max(order_by = n, n = 5, with_ties = F) %>% 
  knitr::kable()
```

### 

```{r, eval=F}
library(sf)

library(rnaturalearth)
library(rnaturalearthdata)
library(ggrepel)
```

```{r, include=F, echo=F, eval=F}
world <- ne_countries(scale = "medium", returnclass = "sf")

europe <- world[which(world$continent == "Europe"),]

ggplot(europe) +
  geom_sf() +
  coord_sf(xlim = c(-25, 50), ylim = c(35,70), expand = FALSE)

```

some x to y

```{r, eval=F}
f <- formulas %>% 
  filter(lang == "sl") %>% 
  #sample_n(10) %>% 
  mutate(f_id = row_number()) %>% 
  select(f_id, text,
         from_placename, to_placename, 
         from_latitude, to_latitude, 
         from_longitude, to_longitude
         ) 

from <- f %>% 
  select(f_id, text, from_placename, from_latitude, from_longitude) %>% 
  rename(placename = from_placename,
         latitude = from_latitude,
         longitude = from_longitude)

to <- f %>% 
  select(f_id, text, to_placename, to_latitude, to_longitude) %>% 
  rename(placename = to_placename,
         latitude = to_latitude,
         longitude = to_longitude)


# merge in a longer table
from_to <- rbind(from, to)


glimpse(f)
glimpse(from_to)

# f
# from_to

err <- f[f$from_latitude == f$to_latitude| f$from_longitude == f$to_longitude, ]

```

```{r, eval=F}
ggplot(world) +
  geom_sf() +
  coord_sf(xlim = c(-25, 90), ylim = c(-35,70), expand = FALSE) + 
  geom_point(data = from_to, aes(x = longitude, y = latitude), size = 1, 
       shape = 23, fill = "darkviolet") + 
  geom_curve(data = f %>% 
               filter(!f_id %in% err$f_id), 
             aes(x = from_longitude, y = from_latitude,
                           xend = to_longitude, yend = to_latitude),
             linewidth = 0.5, curvature = 0.2, 
             colour = "darkviolet", alpha = 0.7) +
  geom_text_repel(data = from_to, 
                  aes(x = longitude, y = latitude, label = placename), 
                  size = 2.5, col = "black", fontface = "bold") 
```

#### temporal

```{r, eval=F}
dist_t_summary %>% 
  select(-third_quant) %>% 
  pivot_longer(!c(lang_t, number_formulas),
               names_to = "type", values_to = "dist_km") %>% 
  mutate(lang = str_extract(lang_t, "^.."), 
         lang_t = str_remove(lang_t, "^..."),
         author_birth_halfdecade = str_remove(lang_t, "—....$")) %>% 
  filter(type != "dist_mean") %>% 
  ggplot(aes(x = time, y = dist_km, 
             group = lang, 
             colour = lang)) + 
  geom_line(aes(linewidth = number_formulas))
```
